#InputScreen

package myproject;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Label;
import java.awt.List;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.imageio.ImageIO;


public class InputScreen extends Frame implements ActionListener
{
	public static Label lblHeading;
	public static Label lblSlope;
	public static Label lblFlood;
	public static Label lblDrainage;
	public static Label lblGypsum;
	public static Label lblCalcium;
	public static Label lblBest;
	public static Label lblModerate;
	public static Label lblLess;
	public static Label lblWorst;
	public static Button btnShow;
	public static TextField txtSlope;
	public static TextField txtFlood;
	public static TextField txtDrainage;
	public static TextField txtGypsum;
	public static TextField txtCalcium;
    public static TextArea tatBest;
    public static TextArea tatModerate;
    public static TextArea tatLess;
    public static TextArea tatWorst;
    public static Font ft;
    public static List bestList;
    public static List modList;
    public static List lessList;
    public static List worstList; 
    BufferedImage bi;
	public InputScreen()    
	{
		setTitle("Input Entry Screen");
		try {
			bi=ImageIO.read(new File("D:\\image2.jpeg"));
		} catch (IOException e1) {
			
			e1.printStackTrace();
		}
		setSize(610,450);
		setLayout(null);
		addWindowListener(new WindowAdapter()
		{
			public void windowClosing(WindowEvent e)
			{
				dispose();
				setVisible(false);
			}
			
		});
		lblHeading = new Label("FARMER SOIL PARAMETERS");
		add(lblHeading);
		lblHeading.setBounds(145, 60, 285, 20);
		ft = new Font("Arial",Font.CENTER_BASELINE,20);
		lblHeading.setFont(ft);
		lblHeading.setBackground(Color.blue);
		lblSlope = new Label("Slope");
		add(lblSlope);
		lblSlope.setBounds(135, 110, 38, 20);
		lblSlope.setBackground(Color.yellow);
		lblFlood = new Label("Flood");
		add(lblFlood);
		lblFlood.setBounds(205, 110, 38, 20);
		lblFlood.setBackground(Color.yellow);
		lblDrainage = new Label("Drainage");
		add(lblDrainage);
		lblDrainage.setBounds(268, 110, 52, 20);
		lblDrainage.setBackground(Color.yellow);
		lblGypsum = new Label("Gypsum");
		add(lblGypsum);
		lblGypsum.setBounds(341, 110, 50, 20);
		lblGypsum.setBackground(Color.yellow);
		lblCalcium = new Label("Calcium");
		add(lblCalcium);
		lblCalcium.setBounds(410, 110, 50, 20);	
		lblCalcium.setBackground(Color.yellow);
		
		txtSlope = new TextField("");
		add(txtSlope);
		txtSlope.setBounds(130, 135, 50, 20);
		txtFlood = new TextField("");
		add(txtFlood);
		txtFlood.setBounds(200, 135, 50, 20);
		txtDrainage = new TextField("");
		add(txtDrainage);
		txtDrainage.setBounds(270, 135, 50, 20);
		txtGypsum = new TextField("");
		add(txtGypsum);
		txtGypsum.setBounds(340, 135, 50, 20);
		txtCalcium = new TextField("");
		add(txtCalcium);
		txtCalcium.setBounds(410, 135, 50, 20);
		
		btnShow = new Button("Show");
		add(btnShow);
		btnShow.addActionListener(this);
		btnShow.setBounds(270,175,50,20);
		
		lblBest = new Label("Best");
		add(lblBest);
		lblBest.setBounds(110, 230, 30, 20);
		lblBest.setBackground(Color.yellow);
		lblModerate = new Label("Moderate");
		add(lblModerate);
		lblModerate.setBounds(217, 230, 60, 20);
		lblModerate.setBackground(Color.yellow);
		lblLess = new Label("Less");
		add(lblLess);
		lblLess.setBounds(345, 230, 30, 20);
		lblLess.setBackground(Color.yellow);
		lblWorst= new Label("Worst");
		add(lblWorst);
		lblWorst.setBounds(465, 230, 40, 20);
		lblWorst.setBackground(Color.yellow);
		
		tatBest = new TextArea("");
		add(tatBest);
		tatBest.setBounds(80, 255, 90, 150);
		tatModerate = new TextArea("");
		add(tatModerate);
		tatModerate.setBounds(200, 255, 90, 150);
		tatLess= new TextArea("");
		add(tatLess);
		tatLess.setBounds(320, 255, 90, 150);
		tatWorst = new TextArea("");
		add(tatWorst);
		tatWorst.setBounds(440, 255, 90, 150);
		bestList = new List(7,true);
		modList = new List(7,true);
		lessList = new List(7,true);
		worstList = new List(7,true);
		
		
		
	}
	
	public void paint(Graphics g)
    {
    	super.paint(g);
    	g.drawImage(bi,0, 0,getWidth(), getHeight(), null);
    }  
		
	public static void main(String[] args)
	{
		InputScreen input = new InputScreen();
		input.show();
		

	}

	@Override
	public void actionPerformed(ActionEvent e) 
	{
		int s,f,d,g,c;
		s=Integer.parseInt(txtSlope.getText());
		f=Integer.parseInt(txtFlood.getText());
		d=Integer.parseInt(txtDrainage.getText());
		g=Integer.parseInt(txtGypsum.getText());
		c=Integer.parseInt(txtCalcium.getText());
		if(e.getSource()==btnShow)
		{
			
			System.out.println(s);
			System.out.println(f);
			System.out.println(d);
			System.out.println(g);
			System.out.println(c);
			
			Connection conn = null;
		     Statement st = null;
		     ResultSet res;   
				try 
				{			
					Class.forName("oracle.jdbc.driver.OracleDriver");
					conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:pratik", "hr", "1111");
					
					System.out.println("Connection Established successfully");
				} 
				catch (Exception ee) 
				{
					System.out.println("Connection could  not be established");
					if (conn != null)
						try {
							conn.close();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
				} 
			 
			 try 
			 {
				 
				 String sql = "SELECT crname,sss1,sss2,sss3,ssn1,ssn2,fss1,fss2,fss3,fsn1,fsn2,dss1,dss2,dss3,dsn1,dsn2,gss1,gss2,gss3,gsn1,gsn2,css1,css2,css3,csn1,csn2 FROM crop2";
					st = conn.createStatement();
					res = st.executeQuery(sql);
					
					while (res.next()) 
					{
						String name = res.getString("crname");
						int Slope[]= new int[5];
						int Flood[]= new int[5];
						int Drainage[]= new int[5];
						int Gypsum[]= new int[5];
						int Calcium[]= new int[5];
				        Slope[0]= res.getInt("sss1");
				        Slope[1]= res.getInt("sss2");
				        Slope[2]= res.getInt("sss3");
				        Slope[3]= res.getInt("ssn1");
				        Slope[4]= res.getInt("ssn2");
				        Flood[0] = res.getInt("fss1");
				        Flood[1]= res.getInt("fss2");
				        Flood[2]= res.getInt("fss3");
				        Flood[3]= res.getInt("fsn1");
				        Flood[4]= res.getInt("fsn2");
				        Drainage[0] = res.getInt("dss1");
				        Drainage[1] = res.getInt("dss2");
				        Drainage[2]= res.getInt("dss3");
				        Drainage[3]= res.getInt("dsn1");
				        Drainage[4] = res.getInt("dsn2");
				        Gypsum[0]= res.getInt("gss1");
				        Gypsum[1] = res.getInt("gss2");
				        Gypsum[2] = res.getInt("gss3");
				        Gypsum[3]= res.getInt("gsn1");
				        Gypsum[4]= res.getInt("gsn2");
				        Calcium[0] = res.getInt("css1");
				        Calcium[1]= res.getInt("css2");
				        Calcium[2]= res.getInt("css3");
				        Calcium[3] = res.getInt("csn1");
				        Calcium[4] = res.getInt("csn2");
				        System.out.println(name);
				        
				        int position[] = new int[5];
				        //slope
				        int pos=4;
				        for(int i=0;i<Slope.length-1;i++)
				        {
				        	
				        	if(s>=Slope[0])
				        	{
				        		pos=0;
				        		break;
				        	}
				        	if(Slope[i]>=s && Slope[i+1]<=s)
				        	{
				        		pos=i+1;
				        		break;
				        	}
				        	
				        }
				        position[0]=pos;
				        
				        //flood
				       pos=4;
				        for(int i=0;i<Flood.length-1;i++)
				        {
				        	
				        	if(f>=Flood[0])
				        	{
				        		pos=0;
				        		break;
				        	}
				        	if(Flood[i]>=f && f>=Flood[i+1])
				        	{
				        		pos=i+1;
				        		break;
				        	}
				        	
				        }
				        position[1]=pos;	
				        //drainage
				        pos=4;
				        for(int i=0;i<Drainage.length-1;i++)
				        {
				        	
				        	if(d>=Drainage[0])
				        	{
				        		pos=0;
				        		break;
				        	}
				        	if(Drainage[i]>=d && d>=Drainage[i+1])
				        	{
				        		pos=i+1;
				        		break;
				        	}
				        	
				        }
				        position[2]=pos;
				        //gypsum
				        pos=4;
				        for(int i=0;i<Gypsum.length-1;i++)
				        {
				        	
				        	if(g>=Gypsum[0])
				        	{
				        		pos=0;
				        		break;
				        	}
				        	if(Gypsum[i]>=g && g>=Gypsum[i+1])
				        	{
				        		pos=i+1;
				        		break;
				        	}
				        	
				        }
				        position[3]=pos;
				        //calcium
				        pos=4;
				        for(int i=0;i<Calcium.length-1;i++)
				        {
				        	
				        	if(c>=Calcium[0])
				        	{
				        		pos=0;
				        		break;
				        	}
				        	if(Calcium[i]>=c && c>=Calcium[i+1])
				        	{
				        		pos=i+1;
				        		break;
				        	}
				        	
				        }
				        position[4]=pos;
				        System.out.println("   ");
				        for(int i=0;i<position.length;i++)
				        {
				        	System.out.println(position[i]);
				        }
				        int flag=0;
				        //logic 
				        //worst
				        for(int i=0;i<5;i++)
				        {
				        	if(position[i]==4 || position[i]==3 )
				        	{
				        		worstList.add(name);
				        		flag=1;
				        		break;
				        	}
				        }
				        if(flag==1)
				        {
				        	continue;
				        }
				        //less
				        int countl=0;
				        for(int i=0;i<5;i++)
				        {
				        	if(position[i]==2)
				        	{
				        		countl++;
				        	}
				        }
				        if(countl>=3)
				        {
				        	lessList.add(name);
				        }
				        else
				        {
				        	//moderate
				        	int countm=0;
				        	for(int i=0;i<5;i++)
				        	{
				        		if(position[i]==1)
				        		{
				        			countm++;
				        		}
				        	}
				        	if(countm>=3)
				        	{
				        		modList.add(name);
				        		
				        	}
				        	else
				        	{
				        		bestList.add(name);
				        		
				        	}
				        }
				       
					}	//while end
					
				    String[] best = bestList.getItems();
				    for(String b:best)
				    {
				    	tatBest.append(b + "\r\n");
				    }
				    
				    String[] moderate = modList.getItems();
				    for(String mod:moderate)
				    {
				    	tatModerate.append(mod + "\r\n");
				    }
				    
				    String[] less = lessList.getItems();
				    for(String l:less)
				    {
				    	tatLess.append(l + "\r\n");
				    }
				    
				    String[] worst = worstList.getItems();
				    for(String wor:worst)
				    {
				    	tatWorst.append(wor + "\r\n");
				    }
				    
					
					if (st != null) 
						st.close();		
					if (conn != null)
						conn.close();
						
			 }		
			catch(SQLException ee)
		    {
					 
		    }
			 
			 
			 
		}
		
		
	}
		

}
